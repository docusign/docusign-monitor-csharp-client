/* 
 * Monitor API
 *
 * An API for an integrator to access the features of DocuSign Monitor
 *
 * OpenAPI spec version: v2.0
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using DocuSign.Monitor.Client;
using DocuSign.Monitor.Model;

namespace DocuSign.Monitor.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataSetApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows for the streaming of data as it becomes available  Required scopes: impersonation
        /// </remarks>
        /// <exception cref="DocuSign.Monitor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The requested API version</param>
        /// <param name="dataSetName">The name of the dataset to stream</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        CursoredResult GetStream(string version, string dataSetName, DataSetApi.GetStreamOptions options = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows for the streaming of data as it becomes available  Required scopes: impersonation
        /// </remarks>
        /// <exception cref="DocuSign.Monitor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The requested API version</param>
        /// <param name="dataSetName">The name of the dataset to stream</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<CursoredResult> GetStreamWithHttpInfo(string version, string dataSetName, DataSetApi.GetStreamOptions options = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows for querying existing data using filter and aggregation clauses  Required scopes: impersonation
        /// </remarks>
        /// <exception cref="DocuSign.Monitor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The requested API version</param>
        /// <param name="dataSetName">The name of the dataset to query</param>
        /// <param name="webQuery">A collection of filter clauses and aggregations scoped to one or more organizations. The fields queryScope and queryScopeId may be omitted defaulting to all applicable organizations</param>
        /// <returns></returns>
        AggregateResult PostWebQuery(string version, string dataSetName, WebQuery webQuery);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows for querying existing data using filter and aggregation clauses  Required scopes: impersonation
        /// </remarks>
        /// <exception cref="DocuSign.Monitor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The requested API version</param>
        /// <param name="dataSetName">The name of the dataset to query</param>
        /// <param name="webQuery">A collection of filter clauses and aggregations scoped to one or more organizations. The fields queryScope and queryScopeId may be omitted defaulting to all applicable organizations</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<AggregateResult> PostWebQueryWithHttpInfo(string version, string dataSetName, WebQuery webQuery);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows for the streaming of data as it becomes available  Required scopes: impersonation
        /// </remarks>
        /// <exception cref="DocuSign.Monitor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The requested API version</param>
        /// <param name="dataSetName">The name of the dataset to stream</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of CursoredResult</returns>
        System.Threading.Tasks.Task<CursoredResult> GetStreamAsync(string version, string dataSetName, DataSetApi.GetStreamOptions options = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows for the streaming of data as it becomes available  Required scopes: impersonation
        /// </remarks>
        /// <exception cref="DocuSign.Monitor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The requested API version</param>
        /// <param name="dataSetName">The name of the dataset to stream</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (CursoredResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CursoredResult>> GetStreamAsyncWithHttpInfo(string version, string dataSetName, DataSetApi.GetStreamOptions options = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows for querying existing data using filter and aggregation clauses  Required scopes: impersonation
        /// </remarks>
        /// <exception cref="DocuSign.Monitor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The requested API version</param>
        /// <param name="dataSetName">The name of the dataset to query</param>
        /// <param name="webQuery">A collection of filter clauses and aggregations scoped to one or more organizations. The fields queryScope and queryScopeId may be omitted defaulting to all applicable organizations</param>
        /// <returns>Task of AggregateResult</returns>
        System.Threading.Tasks.Task<AggregateResult> PostWebQueryAsync(string version, string dataSetName, WebQuery webQuery);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows for querying existing data using filter and aggregation clauses  Required scopes: impersonation
        /// </remarks>
        /// <exception cref="DocuSign.Monitor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The requested API version</param>
        /// <param name="dataSetName">The name of the dataset to query</param>
        /// <param name="webQuery">A collection of filter clauses and aggregations scoped to one or more organizations. The fields queryScope and queryScopeId may be omitted defaulting to all applicable organizations</param>
        /// <returns>Task of ApiResponse (AggregateResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<AggregateResult>> PostWebQueryAsyncWithHttpInfo(string version, string dataSetName, WebQuery webQuery);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DataSetApi : IDataSetApi
    {
        private DocuSign.Monitor.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataSetApi"/> class
        /// using AplClient object
        /// </summary>
        /// <param name="aplClient">An instance of AplClient</param>
        /// <returns></returns>
        public DataSetApi(DocuSignClient aplClient)
        {
            this.ApiClient = aplClient;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.GetBasePath();
        }

        /// <summary>
        /// Gets or sets the ApiClient object
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public DocuSignClient ApiClient { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DocuSign.Monitor.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Allows for the streaming of data as it becomes available  Required scopes: impersonation
        /// </summary>
        public class GetStreamOptions
        {
            /// The cursor value to continue querying the data with. For an intial call, use empty string 
            public string cursor {get; set;}
            /// The maximum number of records to return, minimum of 1, maximum of 2000. Defaults to 1000 if no value is provided 
            public int? limit {get; set;}
        }

        /// <summary>
        ///  Allows for the streaming of data as it becomes available  Required scopes: impersonation
        /// </summary>
        /// <exception cref="DocuSign.Monitor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The requested API version</param>
        /// <param name="dataSetName">The name of the dataset to stream</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>CursoredResult</returns>
        public CursoredResult GetStream(string version, string dataSetName, DataSetApi.GetStreamOptions options = null)
        {
             ApiResponse<CursoredResult> localVarResponse = GetStreamWithHttpInfo(version, dataSetName, options);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Allows for the streaming of data as it becomes available  Required scopes: impersonation
        /// </summary>
        /// <exception cref="DocuSign.Monitor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The requested API version</param>
        /// <param name="dataSetName">The name of the dataset to stream</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of CursoredResult</returns>
        public ApiResponse<CursoredResult> GetStreamWithHttpInfo(string version, string dataSetName, DataSetApi.GetStreamOptions options = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling DataSetApi->GetStream");
            // verify the required parameter 'dataSetName' is set
            if (dataSetName == null)
                throw new ApiException(400, "Missing required parameter 'dataSetName' when calling DataSetApi->GetStream");

            var localVarPath = "/api/v{version}/datasets/{dataSetName}/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (version != null) localVarPathParams.Add("version", this.ApiClient.ParameterToString(version)); // path parameter
            if (dataSetName != null) localVarPathParams.Add("dataSetName", this.ApiClient.ParameterToString(dataSetName)); // path parameter
            if (options != null)
            {
                if (options.cursor != null) localVarQueryParams.Add("cursor", this.ApiClient.ParameterToString(options.cursor)); // query parameter
                if (options.limit != null) localVarQueryParams.Add("limit", this.ApiClient.ParameterToString(options.limit)); // query parameter
            }



            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CursoredResult>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (CursoredResult)this.ApiClient.Deserialize(localVarResponse, typeof(CursoredResult)));
        }

        /// <summary>
        ///  Allows for the streaming of data as it becomes available  Required scopes: impersonation
        /// </summary>
        /// <exception cref="DocuSign.Monitor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The requested API version</param>
        /// <param name="dataSetName">The name of the dataset to stream</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of CursoredResult</returns>
        public async System.Threading.Tasks.Task<CursoredResult> GetStreamAsync(string version, string dataSetName, DataSetApi.GetStreamOptions options = null)
        {
             ApiResponse<CursoredResult> localVarResponse = await GetStreamAsyncWithHttpInfo(version, dataSetName, options);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Allows for the streaming of data as it becomes available  Required scopes: impersonation
        /// </summary>
        /// <exception cref="DocuSign.Monitor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The requested API version</param>
        /// <param name="dataSetName">The name of the dataset to stream</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (CursoredResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CursoredResult>> GetStreamAsyncWithHttpInfo(string version, string dataSetName, DataSetApi.GetStreamOptions options = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling DataSetApi->GetStream");
            // verify the required parameter 'dataSetName' is set
            if (dataSetName == null)
                throw new ApiException(400, "Missing required parameter 'dataSetName' when calling DataSetApi->GetStream");

            var localVarPath = "/api/v{version}/datasets/{dataSetName}/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (version != null) localVarPathParams.Add("version", this.ApiClient.ParameterToString(version)); // path parameter
            if (dataSetName != null) localVarPathParams.Add("dataSetName", this.ApiClient.ParameterToString(dataSetName)); // path parameter
            if (options != null)
            {
                if (options.cursor != null) localVarQueryParams.Add("cursor", this.ApiClient.ParameterToString(options.cursor)); // query parameter
                if (options.limit != null) localVarQueryParams.Add("limit", this.ApiClient.ParameterToString(options.limit)); // query parameter
            }



            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CursoredResult>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (CursoredResult)this.ApiClient.Deserialize(localVarResponse, typeof(CursoredResult)));
        }


        /// <summary>
        ///  Allows for querying existing data using filter and aggregation clauses  Required scopes: impersonation
        /// </summary>
        /// <exception cref="DocuSign.Monitor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The requested API version</param>
        /// <param name="dataSetName">The name of the dataset to query</param>
        /// <param name="webQuery">A collection of filter clauses and aggregations scoped to one or more organizations. The fields queryScope and queryScopeId may be omitted defaulting to all applicable organizations</param>
        /// <returns>AggregateResult</returns>
        public AggregateResult PostWebQuery(string version, string dataSetName, WebQuery webQuery)
        {
             ApiResponse<AggregateResult> localVarResponse = PostWebQueryWithHttpInfo(version, dataSetName, webQuery);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Allows for querying existing data using filter and aggregation clauses  Required scopes: impersonation
        /// </summary>
        /// <exception cref="DocuSign.Monitor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The requested API version</param>
        /// <param name="dataSetName">The name of the dataset to query</param>
        /// <param name="webQuery">A collection of filter clauses and aggregations scoped to one or more organizations. The fields queryScope and queryScopeId may be omitted defaulting to all applicable organizations</param>
        /// <returns>ApiResponse of AggregateResult</returns>
        public ApiResponse<AggregateResult> PostWebQueryWithHttpInfo(string version, string dataSetName, WebQuery webQuery)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling DataSetApi->PostWebQuery");
            // verify the required parameter 'dataSetName' is set
            if (dataSetName == null)
                throw new ApiException(400, "Missing required parameter 'dataSetName' when calling DataSetApi->PostWebQuery");
            // verify the required parameter 'webQuery' is set
            if (webQuery == null)
                throw new ApiException(400, "Missing required parameter 'webQuery' when calling DataSetApi->PostWebQuery");

            var localVarPath = "/api/v{version}/datasets/{dataSetName}/web_query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (version != null) localVarPathParams.Add("version", this.ApiClient.ParameterToString(version)); // path parameter
            if (dataSetName != null) localVarPathParams.Add("dataSetName", this.ApiClient.ParameterToString(dataSetName)); // path parameter
            if (webQuery != null && webQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(webQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = webQuery; // byte array
            }



            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Post, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWebQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregateResult>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (AggregateResult)this.ApiClient.Deserialize(localVarResponse, typeof(AggregateResult)));
        }

        /// <summary>
        ///  Allows for querying existing data using filter and aggregation clauses  Required scopes: impersonation
        /// </summary>
        /// <exception cref="DocuSign.Monitor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The requested API version</param>
        /// <param name="dataSetName">The name of the dataset to query</param>
        /// <param name="webQuery">A collection of filter clauses and aggregations scoped to one or more organizations. The fields queryScope and queryScopeId may be omitted defaulting to all applicable organizations</param>
        /// <returns>Task of AggregateResult</returns>
        public async System.Threading.Tasks.Task<AggregateResult> PostWebQueryAsync(string version, string dataSetName, WebQuery webQuery)
        {
             ApiResponse<AggregateResult> localVarResponse = await PostWebQueryAsyncWithHttpInfo(version, dataSetName, webQuery);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Allows for querying existing data using filter and aggregation clauses  Required scopes: impersonation
        /// </summary>
        /// <exception cref="DocuSign.Monitor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The requested API version</param>
        /// <param name="dataSetName">The name of the dataset to query</param>
        /// <param name="webQuery">A collection of filter clauses and aggregations scoped to one or more organizations. The fields queryScope and queryScopeId may be omitted defaulting to all applicable organizations</param>
        /// <returns>Task of ApiResponse (AggregateResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AggregateResult>> PostWebQueryAsyncWithHttpInfo(string version, string dataSetName, WebQuery webQuery)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling DataSetApi->PostWebQuery");
            // verify the required parameter 'dataSetName' is set
            if (dataSetName == null)
                throw new ApiException(400, "Missing required parameter 'dataSetName' when calling DataSetApi->PostWebQuery");
            // verify the required parameter 'webQuery' is set
            if (webQuery == null)
                throw new ApiException(400, "Missing required parameter 'webQuery' when calling DataSetApi->PostWebQuery");

            var localVarPath = "/api/v{version}/datasets/{dataSetName}/web_query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (version != null) localVarPathParams.Add("version", this.ApiClient.ParameterToString(version)); // path parameter
            if (dataSetName != null) localVarPathParams.Add("dataSetName", this.ApiClient.ParameterToString(dataSetName)); // path parameter
            if (webQuery != null && webQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(webQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = webQuery; // byte array
            }



            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Post, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWebQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregateResult>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (AggregateResult)this.ApiClient.Deserialize(localVarResponse, typeof(AggregateResult)));
        }

    }
}